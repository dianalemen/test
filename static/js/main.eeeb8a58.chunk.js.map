{"version":3,"sources":["components/square.js","components/board.js","helpers/culc-winner.js","helpers/current-move.js","components/game.js","serviceWorker.js","index.js"],"names":["Sguere","value","onClick","className","Board","squares","renderSquare","i","calculateWinner","console","log","lines","length","a","b","c","currentMove","isXnext","Game","props","handleClick","history","state","slice","stepNumber","current","xIsNext","setState","concat","Array","fill","step","this","winner","status","moves","map","move","desc","key","toString","jumpTo","Component","Boolean","window","location","hostname","match","App","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.eeeb8a58.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Sguere({ value, onClick }) {\r\n  return (\r\n    <button className=\"square\" onClick={onClick}>\r\n      {value}\r\n    </button>\r\n  );\r\n};","import React from 'react';\r\nimport Square from './square';\r\n\r\nexport default function Board({ squares, onClick }) {\r\n  const renderSquare = (i) => {\r\n    return <Square\r\n                  value={squares[i]}\r\n                  onClick={() => onClick(i)}\r\n            />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n      </div>\r\n      <div className=\"board-row\">\r\n        {renderSquare(6)}\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n      </div>\r\n    </>\r\n  );\r\n};","export default function calculateWinner(squares) {\r\n  console.log(squares);\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ];\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}","export default function currentMove(isXnext) {\r\n  const x = 'X';\r\n  const o = 'O';\r\n  return isXnext ? x : o;\r\n}","import React, { Component } from 'react';\r\nimport Board from './board';\r\nimport { calculateWinner, currentMove } from '../helpers';\r\n\r\nclass Game extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [{\r\n        squares: Array(9).fill(null),\r\n      }],\r\n      stepNumber: 0,\r\n      xIsNext: true,\r\n    };\r\n  }\r\n\r\n  jumpTo(step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  handleClick = (i) => {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = [ ...current.squares ];\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    const { xIsNext } = this.state;\r\n    squares[i] = currentMove(xIsNext);\r\n\r\n    this.setState({\r\n      history: history.concat([{ squares }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !xIsNext,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { history, xIsNext } = this.state;\r\n    const current = history[this.state.stepNumber];\r\n    const winner = calculateWinner(current.squares);\r\n    const status = winner ? `Winner is ${winner}` : `Next player: ${currentMove(xIsNext)}`;\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? `Go to move #${move}` : 'Go to game start';\r\n      return (\r\n        <li key={move.toString()}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board \r\n          onClick={this.handleClick}\r\n          squares={current.squares}\r\n          xIsNext={this.state.xIsNext}/>\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n  \nclass App extends Component {\n  render() {\n    return (<Game />);\n  }\n}\n  \nReactDOM.render(\n  <App />, document.getElementById('root')\n);\n  \nserviceWorker.unregister();\n"],"sourceRoot":""}